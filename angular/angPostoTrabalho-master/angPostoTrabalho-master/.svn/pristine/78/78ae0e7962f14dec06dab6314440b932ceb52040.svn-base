import { LoginService } from './../../providers/login.service';
import { Usuario } from './../../interfaces/usuario';
import { Linha } from './../../interfaces/linha';

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { ApiService } from './../../providers/posto-trabalho.service';
import { HttpClient } from '@angular/common/http';
import {FormControl, FormGroup, Validators,FormBuilder } from "@angular/forms";
import { HttpClientModule } from '@angular/common/http';
import { map } from 'rxjs/operators';
import {Observable} from 'rxjs';
import { UtilsService } from '../../utils/utils.service';
import { stringify } from 'querystring';


@Component({
  selector: 'app-form-login',
  templateUrl: './form-login.component.html',
  styleUrls: ['./form-login.component.css']
})
export class FormLoginComponent implements OnInit {
  
  private usuario:Usuario =  new Usuario();
  private idLinha:Linha;
  private loginForm: FormGroup;
  private imgSrc: string;
  private error: string
  
  private nome:string;
  
  private usersdigitais:any[];
  private urlBiometria = '';
  private LinhaByIdEmpresa:any[]; 
  
  private empresas = [];
  empresa:FormControl = new FormControl();
  
  private linhas = [];
  linha:FormControl = new FormControl();
  private familias = [];
  familia:FormControl = new FormControl();
  
  digital:FormControl = new FormControl();
  
  
  srcImagem:string = '/assets/imagens/logo-posto-trabalho.png';
  imgBtnAcess:string = '/assets/imagens/btn-acesso.png'
  
  // mostrarMenusEmitter = new EventEmitter<boolean>();
  
  constructor(private router: Router, private login:LoginService,private apiService:ApiService) { }
  
  ngOnInit() {
    
    this.loginForm = new FormGroup({
      linha: new FormControl('', {validators: [Validators.required], updateOn:'blur'}),
      empresa: new FormControl('', {validators: [Validators.required]}),
      familia: new FormControl('', {validators: [Validators.required]})
    })
    
    this.getEmpresa();
    this.getFamilia();
    
  }
  
  /*******************************BIOMETRICO  ********************************** */
  
  logar(){  
    
    if(this.loginForm.controls['linha'].value == ""){
      alert(" Selecione uma Linha ");
    } 
    else{
      this.apiService.getUrlBiometria().subscribe(data => {      
        const user = {
          digital: data,
          empresa: this.loginForm.controls['empresa'].value
        }
        
        this.login.logar(user);     
        
      });
    }
    
  } 
  
  /***************************************************************************************** */  
  getUsersCadastrados(){
    this.apiService.getUsersDigitais()
    .subscribe((data:any)=>{
      this.usersdigitais = data.result;    
      
    })    
  }
  /******************************************** */
  getFamilia() {     
    this.apiService.getFamilia()
    .subscribe((data:any)=>{
      this.familias = data.result;  
      
    }) 
    
  }
  /********************************************** */
  getLinha(e:any){ 
    this.apiService.getLinhaByIdEmpresa(e.target.value).subscribe((
      data:any) => {  
        this.linhas = data.result
        
      }
      );
      
    }
    
    getEmpresa(){
      
      this.empresas = [
        {
          id: 0,
          empresa:"Selecione uma Empresa"
        },
        {
          id: 1,
          empresa:"Digiboard"
        }
      ]
      this.loginForm.controls['empresa'].setValue(this.empresas[0].id);
      
      
      /*  this.apiService.getFamilia()
      .subscribe((data:any)=>{
        this.familia = data.result;   
        console.log(this.familia);
        
        
      })     */
    }
    
    identificar(codPt) {
      console.log(codPt);
      
      var err, payload;
      var result = false;
      
      var DEVICE_AUTO_DETECT	= 255;
      
      var objNBioBSP = new ActiveXObject('NBioBSPCOM.NBioBSP.1'); // Cria o objeto principal
      var objDevice = objNBioBSP.Device; // Objeto com os m�todos que abre e fecha o sensor
      var objExtraction = objNBioBSP.Extraction; //Objeto que com m�todos de captura
      var objMatching = objNBioBSP.Matching; //Objeto com os m�todos de verifica��o do tipo 1:1. N�o usado neste sistema.
      var objIndexSearch = objNBioBSP.IndexSearch; // Cria o IndexSearch: Bando de digitias que ficar� armazenado na mem�ria do pc.
      var n = 0;
      
      /*for ( keyVar in data ) {
        var nUserID;
        var string_digital;
        nUserID = keyVar;
        string_digital = digitais[keyVar][2];
        objIndexSearch.AddFIR(string_digital, nUserID); // Adicona os valores no IndeSearch.
      }*/
      
      result = false;
      
      // Exception handling
      try{
        // Abre o sensor
        objDevice.Open(DEVICE_AUTO_DETECT);
        err = objDevice.ErrorCode;	// Get error code
        
        if ( err != 0 ){
          // Verifica se o sensor foi aberto.
          alert('Falha ao ativar o Sensor Biom�trico, verifique se o mesmo esta conectado!');
        }else{
          
          objExtraction.WindowStyle = 0; // Determinal que a captura ser� sem o POP-UP
          objExtraction.DefaultTimeout = 30000; // Determina que o tempo de captura do sensor ser� de 2 segundos
          objExtraction.Capture(0); // Realiza a captura
          
          if (objExtraction.TextEncodeFIR != ''){
            
            
            //Determina que o tempo de busca no IndexSearch ser� de no m�ximo 5 segundos.
            objIndexSearch.MaxSearchTime = 5000;
            
            //Faz a identifica��o! objExtraction.TextEncodeFIR: � a string gerada. 6 � o n�vel de seguran�a (varia de 1 � 9).
            objIndexSearch.IdentifyUser(objExtraction.TextEncodeFIR, 9);
            
            if (objIndexSearch.ErrorCode == 0){
              //Entra neste if se o usu�rio for encontrado no IndexSearch.
              
              
            }else{
              result = false;
            }
          }
        }
        objDevice.Close(DEVICE_AUTO_DETECT);
        
      }catch(e){
        alert(e.message);
        return(false);
      }
      
      if ( result ){
        alert('TUDO OK!');
      }
      
      return result;
    }
    
    
  }
  
  